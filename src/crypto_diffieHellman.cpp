#include "../include/crypto_diffieHellman.h"
#include <gmpxx.h>
#include <gmp.h>

// defines the amount of measurements for each prime number, over which a mean value is calculated.
#define NO_OF_MEASUREMENTS 5

using namespace Crypto;

CDiffieHellman::CDiffieHellman() {
    // a 512-bit prime and generator generated by the openssl library with the command:
    // openssl dhparam -text 512
    m_prime = Math::CBigInt("9953625526174495975853057728014190089832270620461893620845749451128122018266097548653538568511157070728457395300205764195259360106392707062220593057323419");
    // the generator needs to be a primitive root modulo m_prime to assure, that the secret value generated by
    // both parties can take up any value from 1 to m_prime - 1. Usually the values 2, 3 or 5 are used as generators.
    m_generator = Math::CBigInt("2");
    // lower bound of the secret value of each party.
    m_lowerBound = Math::CBigInt("1");
    // upper bound of the secret value of each party.
    m_upperBound = Math::CBigInt(m_prime - m_lowerBound);
}

CDiffieHellman::CDiffieHellman(const Math::CBigInt &_prime, const Math::CBigInt &_generator) {
    m_prime = Math::CBigInt(_prime);
    m_generator = Math::CBigInt(_generator);
    
    m_lowerBound = 1;
    m_upperBound = m_prime - m_lowerBound;
}

CDiffieHellman::~CDiffieHellman() = default;

void CDiffieHellman::setupClientAlice(unsigned long _seed, Math::CBigInt &_secretKey) {
    
    Math::CBigInt::genRand(m_lowerBound, m_upperBound, _seed, _secretKey);
}


void CDiffieHellman::setupClientBob(unsigned long _seed, Math::CBigInt &_secretKey) {
    
    Math::CBigInt::genRand(m_lowerBound, m_upperBound, _seed, _secretKey);
}

void CDiffieHellman::printExchangeSteps() {
    Math::CBigInt secretKeyAlice, secretKeyBob;
    Math::CBigInt sendValueAlice, sendValueBob;
    Math::CBigInt calculatedSharedSecretAlice, calculatedSharedSecretBob;
    unsigned long seed = 0;
    
    std::cout << "Starting key exchange\n" << std::endl;
    std::cout << "p: " << m_prime.getNumber() << std::endl;
    std::cout << "g: " << m_generator.getNumber() << std::endl;
    
    std::cout << "Starting key exchange\n" << std::endl;
    setupClientAlice(seed, secretKeyAlice);
    std::cout << "Alice' secret (a): " << secretKeyAlice.getNumber() << std::endl;
    setupClientBob(++seed, secretKeyBob);
    std::cout << "Bob's secret (b): " << secretKeyBob.getNumber() << std::endl;
    
    std::cout << "\nAlice calculates A = g^a mod p" << std::endl;
    sendValueAlice = Math::CBigInt::modularExponentiation(m_generator, secretKeyAlice, m_prime);
    std::cout << "A = " << sendValueAlice.getNumber() << std::endl;
    
    std::cout << "\nBob calculates B = g^b mod p" << std::endl;
    sendValueBob = Math::CBigInt::modularExponentiation(m_generator, secretKeyBob, m_prime);
    std::cout << "B = " << sendValueBob.getNumber() << std::endl;
    
    std::cout << "\nA and B are publicly exchanged.\n" << std::endl;
    std::cout << "\nAlice calculates the shared secret s = B^a mod p" << std::endl;
    calculatedSharedSecretAlice = Math::CBigInt::modularExponentiation(sendValueBob, secretKeyAlice, m_prime);
    std::cout << "s = " << calculatedSharedSecretAlice.getNumber() << std::endl;
    
    std::cout << "\nBob calculates the shared secret s = A^b mod p" << std::endl;
    calculatedSharedSecretBob = Math::CBigInt::modularExponentiation(sendValueAlice, secretKeyBob, m_prime);
    std::cout << "s = " << calculatedSharedSecretBob.getNumber() << std::endl;
    
    if (calculatedSharedSecretAlice == calculatedSharedSecretBob) {
        std::cout << "\nThe value of s is the same for both Alice and Bob." << std::endl;
    }
    
    // the value s is the same for both because under mod p
    // A^b mod p = g^ab mod p = g^ba mod p = B^a mod p
}

void CDiffieHellman::profileExchange() {
    Math::CBigInt secretKeyAlice, secretKeyBob;
    Math::CBigInt sendValueAlice, sendValueBob;
    Math::CBigInt calculatedSharedSecretAlice, calculatedSharedSecretBob;
    unsigned long seed = 0;
    
    // table of safe primes in the range [64, 768] in steps of 8 bit
    // the generator in each case is 2.
    std::map<int, std::string> primesToBeMeasured = {
            {64, "18045385321869271259"},
            {72, "2395483174802463921587"},
            {80, "1118203000957036050006323"},
            {88, "231349331841893082883531283"},
            {96, "60166645356482961361536998147"},
            {104, "19057518804330372714108075916163"},
            {112, "4578968643922337652300352906803323"},
            {120, "988639194826452198089137523752532099"},
            {128, "186582905683109574569754282936831357947"},
            {136, "45292901538352736008741590379633420080059"},
            {144, "19223836371763575437215465531857631930628123"},
            {152, "4580751967006536547687709973406356380495879459"},
            {160, "1143300376409328506830573120778627070804416102363"},
            {168, "317425741450548609128284736637102789581976362373827"},
            {176, "84250358771865224224790785506155929198488826516814219"},
            {184, "14462747568034143330752193182553947430067314522358468499"},
            {192, "3865707280927177829581568048883323832598981765097448409907"},
            {200, "1545089141367583815934345454471450254195136559402699010482539"},
            {208, "276075706872614582933227679706069152651823405792277017660988187"},
            {216, "71070078944178742318527180597223902685713673499366703870914596307"},
            {224, "13740692928232319416552235409379436935866984861705843996841388106659"},
            {232, "4609112525140379880043882053721830588022594314856128464248587441421763"},
            {240, "1653023913288027765443178015220993141453753353454993903218553810620039467"},
            {248, "227275217744723158114390896083684584011367899560727022096845672206730158843"},
            {256, "102010591651823617611123416974520855844705532962069188104305237577769037314483"},
            {264, "18361252592761455729158560287101588212285561514627026469642037270639426770638427"},
            {272, "6730336897652607418256113656330333723655231835659308304677497057793835560146185283"},
            {280, "1605027942969538070895248888030094995356230444733218584327044562017840199939291557019"},
            {288, "340382663833619074599940537630725027438094011162869438754090722401949514838757297528987"},
            {296, "122224470481615833156974521758542898799566574651445328043357383057380766735056841054438323"},
            {304, "17269675392829093461541093595251824032066123387610688851339021452786650689101990906417051579"},
            {312, "6491916926767730373535851428381190442374334728150577272504387663916837033109475448489374504947"},
            {320, "1347457272605826539696706079241536106924364617417655501209912399468044306816360231665583542083339"},
            {328, "383704789491646827186623981329271331323260968825117076087251480088843662209305520086580238133230179"},
            {336, "117906380712827176588483871518347111696600349253434195138005437810107952568834468933319455558457754843"},
            {344, "18394767810728664025519549905708790703407694590488329825214466593406731622215400682925343064864359339067"},
            {352, "5266766428680445188340831999512463946235293599946029289637445505911504168804597400375651516530993989804107"},
            {360, "2334327969277020762505172885115175487998443737168881741177948092257077529195125689652841100962673413124286043"},
            {368, "592483933580723497779377475718049515407360456567922536655018171300572564725044655207225035849366768886555435699"},
            {376, "139606205419012960081376650242056160927675243438285842091384900439911708782940936190698345689203359651948609961787"},
            {384, "33691994543038398771922153251881636278489842911621583883537809770341955614641072361719421234830719429753626771117499"},
            {392, "7474080129384654447561432107859511852996160899051598751572337647615877472328953549353412009179223888432416633682760603"},
            {400, "1544206841155329103080941157899950908979992457937816872255633412548769119777949841426784408134028951516614240087561279323"},
            {408, "453271237856127921389276894619998943922546299345608635298534534472432251601830183233353278513334204862912312701364331339747"},
            {416, "99052719123431451526785454974711765388098188360031125806580895964095476302890631619811580057381780397690339387222937543894539"},
            {424, "34760488648453109308248633136638368195210102910781367812506072269743984408948215720607914462944660467852247604149144868289084739"},
            {432, "8175347807698056790730649451396876263789471097127953694801308326403378172882565935402599886707004262758068004545067351030380152683"},
            {440, "1961332481119116350221348310763147044402725891278571195303698216797387994289446662205711407513657957005856231708967813343898851677467"},
            {448, "563658851997584455047549721723225375893034548756346791695876695995542773236850016228447057489722291980272795283260402666332289571626939"},
            {456, "173349136229431637366809205481116707542593637727336767080621796521478459259752548262127660484354457147591815638440214176551147089761163379"},
            {464, "40678731103971212575419066375739422576421565724324813444965535423426763417700241241471999452982199081791358210116197738081917031738689483243"},
            {472, "10935783276117271161333559473209507205334390748416984594161377161118070527236469004258829646952802606046780293093720954410447742948119137440547"},
            {480, "2169856401075471735516958347559454354699550752890853626214392754660750319822781994893103025282998449643776735233379279323973331702545201377094859"},
            {488, "556094081600406038078800993033068148342294821838697696582531154107541054686540756732143955281338860368116486530711675522290256233642848912815555123"},
            {496, "152996016905459978447657043396803450561178278428234391691256184436118379927930440966598373430181588406912598982609104767483003126491778401707965013403"},
            {504, "46779461745917576615738627040766412268458469081349694061526904923118720646699552648801649471689349929787326075082755873303599784953210094015414516084539"},
            {512, "11738831590258251226416319891603276978852817390442451356831444580664655593605603088976595187930282929919838621915663363260524356940246143083638194748586483"},
            {520, "3238941087237205015943721913236853277221999167231272490775868699588201952509167840082610918448605425358535206680956812805214170606293063763391930187500281067"},
            {528, "577668903050374040426742399220472972449689650906973766862051825613061554110177733825141056949024543660856292647254575882247187717511254889949232076362075667843"},
            {536, "131717269110011937012614904380300084158819950292732587184923887319350723129909216456623967873739633773368514213267753299793727307033735779513949267404064742665307"},
            {544, "36362293756584034807093252986193195792906588552650642348704540434793743480496964742228696381012955119667929508050135655244379659258906526740709707666535623815692739"},
            {552, "9519223429770410215308622195897055948232937294163140517073782643166316556775745528442762566918750405978088817156118500089232955979751700842051281280558457980241377283"},
            {560, "2552682138851822733674105022311052839177172096228809265268605653130366023251753671821773574250211927141188421832040569160982415984352034985569247768289397729912877710019"},
            {568, "629398495347710913626086105661388021658436109568315659668905785635209226484257140530440715253090618927637386255736635872983639824285886458051000667138562007386757291490627"},
            {576, "136098633372937260508868625011212857602677879671870911968615237242004709531015217127758559798355827514827483092829836232679937508004464546333605726651366221869668338590788083"},
            {584, "50720811525743964546044951699148363582156886644674063979816991066233247151388020764054542724123906680551192706707263407536034847634699507317742927386477626472508643879330996707"},
            {592, "11516683088005229334812143484676248658212007334173342498204976479525242624169489540690485046788945211097579475365718883658353883215766022401961587782150738404366552694043132155923"},
            {600, "2579312310623600919941448352754204658134510129420898502018737650196419298218757863272142220631406308515437747670852513407126805893992052815593443777493472090845493954290952819070939"},
            {608, "915812921237674879269999174931272639972009423543101566482935791746627101565594139792210165178614070450185142920810040706622600293085283352671581536561418025397016261289259429579780827"},
            {616, "154178613791810635195768029547915977385733569553594093555572882314844029042375307380548480876169816163488595886555223505829137575553582665882761451848587876769964500381948741670323480723"},
            {624, "45298773600737261284882447792730508902863384988938471062480856420223092693049259061389430982755124376745117685808395142559643637516970925927605336404646345314414356728205752611845960441243"},
            {632, "14197064092989311986859330319494218185689254328761703608971241068062186319413624157309543909235783405552302600615405855049070216753216560434660831465562026106772249641908378487984003790324603"},
            {640, "3997606315910711381990870531317083579858835947011585712653200909759822939526312768919582424278384003112618173371701748880112901642096650118629253255313925593401486403848841997063357025540147603"},
            {648, "739582594632249416767797254650831201006717978480179235492825612284650103515175452244539675270592735431305504534392244158542318032485225861101658954847290912853406853481222383159253133632896853283"},
            {656, "175856468368077536030927869582697488395146221143748299989158162143311472212015013205457005483300576299150876252140937414308124694627543331083360639804517782234466860634534061846355444137223796765483"},
            {664, "73336856575310636387924103410217611899853697057450156547928872824676677419837439706124268121496154981652115888421362147947293677145461183027311267790974916434787802144357285735098616489074355138302339"},
            {672, "11347315095413492357126479065292023048565568676533131885289833146605925323261219324683261365456831363249632984235312721689830320255481521862424738693331366450810110447841115223151320127180825252240749683"},
            {680, "3994711232608066159548686753715283286194821880503732630708007850717897576592566344665484616907519576782538394439849527558334867169960189923128067626858225228789750623214083726530025485972917606954105534307"},
            {688, "713816855303894517831016239643211221331502875369892710914623848590940489159812642200774945388427439868337272354043089262388083956693054049508586707513013134539186100454360990908479513131560566215181181938099"},
            {696, "244472269461251579237612776662971295206513199065145796696546007326210562801288218251356820532081953468545916083814815656086896121264213705298939868072966723433398973964046871204717232729942345810267309325436779"},
            {704, "80745742837741722449977641544460579762995852865290495828724550139035316845795507235533567908177274100006433090312921676943837801022573271289321664517147563826697621177388895644441217315293297865594862047986665523"},
            {712, "19729080425523443808133386217507119418454315640242388698764519782862900093242908832558300225354427744052551692396467307176872625684684504088500832564543173643649821031462181447509677347577671379549628645578851664227"},
            {720, "5024248745561802875913153353531938694140133558500255031713554292107876531953932800668809797902071648769448796395440691654829380160290097775688330142406344384924409223949227071774154180893198429666464476029993041563659"},
            {728, "1393934430786101236799400200736311160790019703190667504384215717173932985539736923410729871089480365248817334399131561181638032243632521981507094490747355599656455823109996816282331318647216235503329167523361628754222739"},
            {736, "211996908371353103018068976040998272921583278250364078076447796931732333722701896427274240523092944765350266814576561232695154083152421310051495996496929596369611348240456764772438812929506322038508168349151831655981091739"},
            {744, "88850252921290363097455237707035041932171978017517575747193102131778751125343601282314650438879428190182414821365923922194780030790141051079811334528140984435147809578044113876049936459341333217696748923393558416020229836827"},
            {752, "19788825050466042632911704413853097666240115961735074905777382867829649347430834279750916097933874672854643136717727892926814610989324359444362985917940702500063496544023926995257013659484291289138667224196148567425390429686507"},
            {760, "5967277643182021499821905224000252019739372616869353380736028130637105451290813510857344892352120788116261635143018625623198839544182699504033717589764181539611579336135703467568635861088759135957227152251102551933720611190605003"},
            {768, "936142862920511463811786611098119903294930606824956668408850930095936792859229120538176539639045302474513835798073160801485191360848690338599370749085333502905075844864531395748565712063583325102092471338595557202101628403478162803"}
    };
    
    profiler p;
    
    std::cout << "Starting to measure..." << std::endl;
    
    /* Uncomment the following for a comparison measurement with the GMP library
    mpz_t sValAlice, sValBob, calcValAlice, calcValBob;
    mpz_inits(sValAlice, sValBob, calcValAlice, calcValBob, NULL);
    mpz_t g, prime;
    mpz_init(prime);
    if (mpz_init_set_str(g, m_generator.getNumber().c_str(), 10) ==-1) exit(EXIT_FAILURE);
    */
    
    for (const auto &i : primesToBeMeasured) {
        std::cout << "Measuring " << i.first << " bit prime..." << std::endl;
        
        for (auto j = 0; j < NO_OF_MEASUREMENTS; ++j) {
            // Uncomment the following for a comparison measurement with the GMP library
            //mpz_t secretA, secretB;
            p.startClockMeasure();
            p.startCycle = p.cycleMeasure();
    
            m_prime = i.second;
            /* Uncomment the following for a comparison measurement with the GMP library
            if (mpz_init_set_str(prime, m_prime.getNumber().c_str(), 10) ==-1) exit(EXIT_FAILURE);
            setupClientAlice(seed, secretKeyAlice);
            setupClientBob(++seed, secretKeyBob);
            if (mpz_init_set_str(secretA, secretKeyAlice.getNumber().c_str(), 10) ==-1) exit(EXIT_FAILURE);
            if (mpz_init_set_str(secretB, secretKeyBob.getNumber().c_str(), 10) ==-1) exit(EXIT_FAILURE);
            mpz_powm(sValAlice, g, secretA, prime);
            mpz_powm(sValBob, g, secretB, prime);
            mpz_powm(calcValAlice, sValBob, secretA, prime);
            mpz_powm(calcValBob, sValAlice, secretB, prime);
            */
            
            // Comment out the following in case of performing a comparison measurement with the
            // GMP library.
            sendValueAlice = Math::CBigInt::modularExponentiation(m_generator, secretKeyAlice, m_prime);
            sendValueBob = Math::CBigInt::modularExponentiation(m_generator, secretKeyBob, m_prime);
            calculatedSharedSecretAlice = Math::CBigInt::modularExponentiation(sendValueBob, secretKeyAlice, m_prime);
            calculatedSharedSecretBob = Math::CBigInt::modularExponentiation(sendValueAlice, secretKeyBob, m_prime);
            // until here
            
            p.stopCycle = p.cycleMeasure();
            p.stopClockMeasure();
            p.clockMeasurements.push_back(p.diffClock);
            p.cycleMeasurements.push_back(p.stopCycle - p.startCycle);
            // Uncomment the following for a comparison measurement with the GMP library
            // assert(mpz_cmp(calcValAlice, calcValBob) == 0);
            // mpz_clears(secretA, secretB, NULL);
            assert(calculatedSharedSecretAlice == calculatedSharedSecretBob);
        }
        
        p.doStats();
        p.writeToFile(std::to_string(i.first), "measurements_clock_MPZ", 1);
        p.writeToFile(std::to_string(i.first), "measurements_cycle_MPZ", 2);
        p.clockMeasurements.clear();
        p.cycleMeasurements.clear();
    }
    // Uncomment the following for a comparison measurement with the GMP library
    //mpz_clears(sValAlice, sValBob, calcValAlice, calcValBob, g, prime, NULL);
}
